Why Kotlin?
--------------------------------------------------
Kotlin receives first-class support from Google and has many important language features that Java doesn't have
        Concise Syntax
        Interoperability with Java
        Null Safety
        Extension Functions
        Inline functions
        Coroutines for Asynchronous Programming
        Tooling and IDE Support
        Officially Supported for Android Development

Kotlin offers several advantages that make it an attractive choice for many developers and organizations:

Concise Syntax:
----------------------------
-Kotlin's syntax is concise and expressive, allowing developers to write cleaner and more
readable code with fewer boilerplate constructs compared to languages like Java.

Interoperability with Java:
----------------------------
-Kotlin is fully interoperable with Java, meaning you can use Kotlin alongside existing  Java codebases
seamlessly.

-This makes it easy to adopt Kotlin gradually without rewriting existing code.

Null Safety:
----------------------------
-Kotlin's type system incorporates null safety features, which help prevent null pointer exceptions at
compile time.
-This is achieved through nullable and non-nullable types, along with safe calls and the Elvis
operator.

Extension Functions:
----------------------------
-Kotlin supports extension functions, which allow developers to add new functionality to existing classes without
modifying their source code.

-This promotes code reuse and enhances the readability of APIs.

-Java does not have a built-in feature called "extension functions" like Kotlin does.

-However, you can achieve similar functionality through other means.

-Extension functions in Kotlin allow you to add new methods to existing classes without modifying their source
code.

-In Java, this can be mimicked using "static utility methods or default methods in interfaces".

Coroutines for Asynchronous Programming:
---------------------------------------
-Kotlin provides built-in support for coroutines, which offer a lightweight and efficient way to write asynchronous
 code.

-Coroutines simplify concurrency and enable developers to write asynchronous code in a sequential style.

Functional Programming Features:
---------------------------------------
-Kotlin supports functional programming features such as higher-order functions, lambda expressions, and immutable
 data structures.

-These features encourage a more functional programming style, leading to more concise and maintainable code.

Tooling and IDE Support:
---------------------------------------
-Kotlin has excellent tooling and IDE support, including integration with popular IDEs like IntelliJ IDEA,
Android Studio, and Visual Studio Code.

-This enables features such as code completion, refactoring, and debugging.

Officially Supported for Android Development:
---------------------------------------
-Kotlin is officially supported for Android development by Google.

-Many Android developers have adopted Kotlin due to its benefits, leading to increased community support and
resources for Kotlin Android development.



--------------------------------------------------
Kotlin:
--------------------------------------------------

-Kotlin is a modern, statically-typed programming language that runs on the Java
Virtual Machine (JVM)

-It can also be compiled to JavaScript or native code.

-It was released in 2016 by JetBrain.

-Kotlin is designed to be fully interoperable with Java, allowing developers to use existing Java libraries
 and frameworks while offering a more concise, expressive, and safe syntax.

-------------------------------------------------------
Usage:
-------------------------------------------------------
-Kotlin is widely used for

    -Mobile applications (specially Android apps)
    -Web development
    -Server side applications
    -Data science
    -And much, much more!

-Its popularity has been growing rapidly due to its modern features and seamless integration with existing Java ecosystems.

-----------------------------------------------------
Why Kotlin in short?
----------------------------------------------------
-Kotlin is fully compatible with Java

-Kotlin works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)

-Kotlin is concise and safe

-Kotlin is easy to learn, especially if you already know Java

-Kotlin is free to use

-Big community/support
------------------------------------------------
Kotlin IDE
------------------------------------------------

-The easiest way to get started with Kotlin, is to use an IDE.

-An IDE (Integrated Development Environment) is used to edit and compile code.

----------------------------------------------
example:
----------------------------------------------

fun main(){
    println("Hello Kotlin");
}

Before Kotlin version 1.3, it was required to use the main() function with parameters,
like: fun main(args : Array<String>).
-------------------------------------------------------------------------------------------------------------------
*** Why its not good practice to put fun main() inside  a class?  ***
-------------------------------------------------------------------------------------------------------------------
In Kotlin, you can actually put the fun main inside a class, but it's not common practice. The reason is that the
main function is the entry point of a Kotlin application, and it's typically expected to be a top-level function
(i.e., outside any class or object) to follow the conventional way of starting a program.

Here are a few key points about the main function in Kotlin:
----------------------------------------------------------------

Top-level Declaration:
-----------------------------
    The main function is usually declared at the top level in a Kotlin file.

    This makes it easy for the runtime to locate and execute the function as the entry point of the application.

Entry Point Requirements:
-----------------------------
    The Kotlin runtime looks for a top-level main function with the appropriate signature
    (fun main(args: Array<String>)) to start the application.

    Placing main inside a class would require additional configuration to specify the entry point.

Java Interoperability:
----------------------------
    Kotlin applications often interoperate with Java.

    The Java Virtual Machine (JVM) expects the entry point of an application to be a static main method.

    A top-level main function in Kotlin is compiled to a static method, aligning with JVM expectations.

However, if you still want to place the main function inside a class, you can do so by specifying the entry
point explicitly. Here's how you can achieve this:

        Inside a Class
        class MyApplication {
            companion object {
                @JvmStatic
                fun main(args: Array<String>) {
                    println("Hello from main inside a class!")
                }
            }
        }
        Specifying the Entry Point
        If you use a build tool like Gradle, you can specify the entry point in your build.gradle file


----------------------------------------------
Reading input in kotlin
----------------------------------------------
In Kotlin, you can read input from the user using various methods.

    1. Using readLine() function:
    -----------------------------
    The readLine() function reads a line of input from the standard input stream (usually the console) and returns it as a string.

        println("Enter your name:")
        val name = readLine() // Reads input from the console
        println("Hello, $name!")

    2. Using Scanner class (Java interop):
    ------------------------------------------
    We can also use Java's Scanner class to read input from the console.

        import java.util.Scanner

        val scanner = Scanner(System.`in`)
        println("Enter your age:")
        val age = scanner.nextInt() // Reads an integer input
        println("You are $age years old.")

    3. Command-line arguments:
    ----------------------------------
    You can pass command-line arguments to your Kotlin program when executing it from the terminal.

    Command-line arguments are accessed through the args array in the main function.

        fun main(args: Array<String>) {
            val arg1 = args.getOrElse(0) { "No argument provided" }
            println("First argument: $arg1")
        }
    If you run your program with java -jar MyProgram.jar argument1, it will print First argument: argument1.

    4. Reading from files or other sources:
    -------------------------------------------

    You can read input from files or other sources using classes like File, InputStream, or Reader.

        import java.io.File

        val file = File("input.txt")
        val lines = file.readLines()
        lines.forEach { println(it) }
----------------------------------------------
Comment lines in Kotlin
----------------------------------------------
Single line comment -//

Multiline comment  - /* */







