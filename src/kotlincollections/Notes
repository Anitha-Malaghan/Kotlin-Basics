Kotlin Collections
-------------------------------------------------------------------------------------------------------------------
Collection:
-------------------
Represents a generic collection of elements.
The Collection interface provides common operations for collections such as size, isEmpty, contains, etc.

val collection: Collection<String> = listOf("apple", "banana", "orange")
-------------------------------------------------------------------------------------------------------------------
1. List:
---------------
Represents an ordered collection of elements.
Lists in Kotlin can be mutable (MutableList) or immutable (List).

    Immutable lists are created using: listOf() function
    Mutable lists are created using ArrayList(), arrayListOf(), mutableListOf().

        val immutableList = listOf("apple", "banana", "orange")
        val mutableList = mutableListOf("apple", "banana", "orange")

2. Set:
--------------
Represents a collection of unique elements.
Sets in Kotlin can also be mutable (MutableSet) or immutable (Set).


    Immutable sets are created using the setOf() function
    Mutable sets are created using HashSet(), hashSetOf(), mutableSetOf().

    val immutableSet = setOf("apple", "banana", "orange")
    val mutableSet = mutableSetOf("apple", "banana", "orange")

sets do not support updating elements directly in the same way that lists do with indexing.

However, you can indirectly "update" a set by removing an element and then adding a new one.

    mutableSet.remove("banana")
    mutableSet.add("grape")

3. Map:
-----------------
Represents a collection of key-value pairs.
Maps in Kotlin can also be mutable (MutableMap) or immutable (Map).

    Immutable maps are created using: mapOf() function
    Mutable maps are created using: HashMap(),hashMapOf(),  mutableMapOf().


    val immutableMap = mapOf(1 to "apple", 2 to "banana", 3 to "orange")
    val mutableMap = mutableMapOf(1 to "apple", 2 to "banana", 3 to "orange")


a Kotlin list to hold elements of different types by using the Any type, which is the root of the Kotlin class
 hierarchy and corresponds to the Object type in Java.

 Here's how you can achieve it:
    val mixedList: List<Any> = listOf("apple", 1, 3.14, true)

In this example, mixedList is a list that can hold elements of any type, similar to how you would use Object in Java. You can add elements of different types to this list, and they will be treated as Any:

    mixedList.forEach { element ->
        println("Element: $element, Type: ${element::class.simpleName}")
    }
Output:

    Element: apple, Type: String
    Element: 1, Type: Int
    Element: 3.14, Type: Double
    Element: true, Type: Boolean
    However, it's important to use this approach cautiously because it can lead to a loss of type safety and can make the code harder to understand and maintain. It's generally recommended to use a more specific type if possible, such as a sealed class hierarchy or a data class with nullable properties, to represent heterogeneous data.

Iterable:
---------------
Represents a sequence of elements that can be iterated sequentially.

The Iterable interface provides methods for iteration such as forEach, map, filter, etc.

val iterable: Iterable<String> = listOf("apple", "banana", "orange")

These are just some of the basic collection types provided by Kotlin.
Kotlin's standard library also includes additional collection types and extension functions for working with
collections effectively.


