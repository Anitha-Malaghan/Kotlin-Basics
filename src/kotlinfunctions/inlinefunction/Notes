Inline Function
------------------------------
Inline functions can improve performance by preventing function call overhead.

In Kotlin, the higher-order functions or lambda expressions, all stored as an object so memory allocation, for both
function objects and classes, and virtual calls might introduce runtime overhead.

Sometimes we can eliminate the memory overhead by inlining the lambda expression.

In order to reduce the memory overhead of such higher-order functions or lambda expressions, we can use the inline
keyword which ultimately requests the compiler to not allocate memory and simply copy the inlined code of that
function at the calling place.

    inline fun performOperation(a: Int, b: Int, operation: (Int, Int) -> Int): Int {
        return operation(a, b)
    }

    fun main() {
        val sum = performOperation(5, 6) { x, y -> x + y }
        println("Result: $sum")
    }