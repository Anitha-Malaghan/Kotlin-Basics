Kotlin supports four visibility modifiers:

-public
-private
-protected
-internal

Visibility Modifiers for Constructors
---------------------------------------------------------------------------------------------------------------
-These modifiers can be applied to constructors to control where instances of the class can be created.

---------------------------------------------------------------------------------
Here's an example demonstrating each visibility modifier for constructors:
---------------------------------------------------------------------------------


package com.example.constructorvisibilitymodifiers
    --------------------------------------------------------------------------------------------------------
    Public constructor (default)
    --------------------------------------------------------------------------------------------------------

    class PublicConstructorClass(val name: String) {
        // Public constructor by default
    }

    --------------------------------------------------------------------------------------------------------
    Private constructor
    --------------------------------------------------------------------------------------------------------

    class PrivateConstructorClass private constructor(val name: String) {
        // Private constructor, cannot be instantiated outside this class
        companion object {
            fun create(name: String): PrivateConstructorClass {
                return PrivateConstructorClass(name)
            }
        }
    }

    --------------------------------------------------------------------------------------------------------
    Internal constructor
    --------------------------------------------------------------------------------------------------------

    class InternalConstructorClass internal constructor(val name: String) {
        // Internal constructor, visible within the same module
    }

    --------------------------------------------------------------------------------------------------------
    Protected constructors
    --------------------------------------------------------------------------------------------------------
    -These are not directly allowed for top-level classes in Kotlin

    -They can be used in subclasses

        open class ProtectedConstructorClass protected constructor(val name: String) {
            // Protected constructor, can be called in subclasses
        }

class Subclass(name: String) : ProtectedConstructorClass(name)

fun main() {
    // Public constructor
    val publicInstance = PublicConstructorClass("Alice")
    println("Public instance: ${publicInstance.name}")

    // Private constructor
    val privateInstance = PrivateConstructorClass.create("Bob")
    println("Private instance: ${privateInstance.name}")

    // Internal constructor
    val internalInstance = InternalConstructorClass("Charlie")
    println("Internal instance: ${internalInstance.name}")

    // Protected constructor
    val protectedInstance = Subclass("Dave")
    println("Protected instance: ${protectedInstance.name}")
}
Explanation
Public Constructor (default):

kotlin
Copy code
class PublicConstructorClass(val name: String) {
    // Public constructor by default
}
The constructor is public by default, meaning instances of PublicConstructorClass can be created from anywhere.
Private Constructor:

kotlin
Copy code
class PrivateConstructorClass private constructor(val name: String) {
    // Private constructor, cannot be instantiated outside this class
    companion object {
        fun create(name: String): PrivateConstructorClass {
            return PrivateConstructorClass(name)
        }
    }
}
The constructor is marked private, so instances cannot be created outside the class.
A companion object provides a create method to instantiate the class.
Internal Constructor:

kotlin
Copy code
class InternalConstructorClass internal constructor(val name: String) {
    // Internal constructor, visible within the same module
}
The constructor is marked internal, so instances can be created only within the same module.
Protected Constructor:

kotlin
Copy code
open class ProtectedConstructorClass protected constructor(val name: String) {
    // Protected constructor, can be called in subclasses
}

class Subclass(name: String) : ProtectedConstructorClass(name)
Protected constructors are not directly allowed for top-level classes but can be used in subclasses.
Subclass extends ProtectedConstructorClass and can call its protected constructor.
Usage in main
Public:

kotlin
Copy code
val publicInstance = PublicConstructorClass("Alice")
println("Public instance: ${publicInstance.name}")
Private:

kotlin
Copy code
val privateInstance = PrivateConstructorClass.create("Bob")
println("Private instance: ${privateInstance.name}")
Internal:

kotlin
Copy code
val internalInstance = InternalConstructorClass("Charlie")
println("Internal instance: ${internalInstance.name}")
Protected:

kotlin
Copy code
val protectedInstance = Subclass("Dave")
println("Protected instance: ${protectedInstance.name}")
Conclusion
This example demonstrates how to use visibility modifiers for constructors in Kotlin to control where and how instances of classes can be created. This can be particularly useful for enforcing certain design patterns and encapsulation principles in your code.






