Kotlin functions
---------------------
-In Kotlin, functions are first-class citizens, meaning they can be stored in variables and
 data structures, passed as arguments to and returned from other higher-order functions.

-Kotlin provides a rich set of features to define and work with functions.
-------------------------------
Basic Syntax
-------------------------------
    fun functionName(parameter1: Type1, parameter2: Type2, ...): ReturnType {
        // function body
        return value
    }
-------------------------------
Example
-------------------------------
    fun add(a: Int, b: Int): Int {
        return a + b
    }
-------------------------------

Single Expression Functions
------------------------------------------
Kotlin allows functions to be defined with a single expression:

    fun add(a: Int, b: Int): Int = a + b

------------------------------------------
Default and Named Arguments
------------------------------------------
Functions can have default parameter values and named arguments.

    fun greet(name: String, greeting: String = "Hello") {
        println("$greeting, $name!")
    }

    Named Arguments

    greet(name = "Alice", greeting = "Hi")
    greet(name = "Bob")

----------------------------------------------
Variable Number of Arguments (Varargs)
----------------------------------------------
You can define functions that accept a variable number of arguments using the vararg keyword.


    fun printAll(vararg messages: String) {
        for (message in messages) println(message)
    }

    printAll("Hello", "World", "Kotlin", "is", "awesome")

----------------------------------------------
Higher-Order Functions
---------------------------------------------
Functions that take other functions as parameters or return functions are called higher-order functions.


    fun calculate(a: Int, b: Int, operation: (Int, Int) -> Int): Int {
        return operation(a, b)
    }

    val sum = calculate(4, 5, ::add)  // Using function reference

----------------------------------------------
Lambdas
----------------------------------------------
Lambdas are anonymous functions that can be used as function expressions.

    val sumLambda: (Int, Int) -> Int = { x, y -> x + y }
    val result = sumLambda(3, 4)

-------------------------------------------------
Inline Functions
-------------------------------------------------
Inline functions can improve performance by avoiding the overhead of function calls,
especially for higher-order functions.


    inline fun inlineCalculate(a: Int, b: Int, operation: (Int, Int) -> Int): Int {
        return operation(a, b)
    }

-------------------------------------------------
Extension Functions
-------------------------------------------------
Kotlin allows you to extend a class with new functions without modifying the original class.

    fun String.addExclamation(): String {
        return this + "!"
    }

    val excited = "Hello".addExclamation()  // "Hello!"

-------------------------------------------------
Function Types
-------------------------------------------------
Kotlin supports function types and allows functions to be assigned to variables.

    val operation: (Int, Int) -> Int = ::add
    val result = operation(10, 20)

--------------------------------------------------
Local Functions
--------------------------------------------------
You can define functions within other functions. These are called local functions.


    fun outerFunction() {
        fun innerFunction() {
            println("I am an inner function")
        }
        innerFunction()
    }
------------------------------------------------
Recursion
------------------------------------------------
Kotlin supports recursive functions.

    fun factorial(n: Int): Int {
        return if (n == 0) 1 else n * factorial(n - 1)
    }

------------------------------------------------
Tail-Recursive Functions
------------------------------------------------
Kotlin optimizes tail-recursive functions to avoid stack overflow errors.

    tailrec fun factorial(n: Int, accumulator: Int = 1): Int {
        return if (n == 0) accumulator else factorial(n - 1, accumulator * n)
    }



